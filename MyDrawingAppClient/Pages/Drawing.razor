@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Threading;
@using BlazorColorPicker
@using DistributedDrawing.Example.Extensions
@inject NavigationManager NavManager;


<div id="canv" @onmousemove="MoveMouse" @onmousedown="DownMouse" @onmouseup="UpMouse"
     @ontouchmove="MoveTouch" @ontouchstart="DownTouch" @ontouchend="UpTouch"
     style="background:@currentBackgroundColor;border:1px solid black;display:inline-block;max-height:100vh;max-width:100vw;overflow:hidden;margin: 0;
                                                                                                            padding: 0;   position: fixed;">
    <svg style="width:720px; height:1920px;">
        @foreach (var line in Lines)
        {
            <LineComponent X1=@line.prevX Y1=@line.prevY X2=@line.currX Y2=@line.currY Stroke=@line.color StrokeWidth=@line.lineWidth />
        }
    </svg>
</div>


<div class="fixed-bottom">
    @* <span>@status/@count lines</span> *@
    <button class="btn btn-outline-info" @onclick="OpenColorModal">
        <div style="background-color:@currentBrushColor" class="buttonColor"></div>üåà
    </button>
    <ColorPicker IsOpened="brushColorPickerOpened" Closed="ChangeBrushColor" MyColor="@currentBrushColor"></ColorPicker>
    <ColorPicker IsOpened="backgroundColorPickerOpened" Closed="ChangeBackgroundColorAndSendMessageServer" MyColor="@currentBackgroundColorTemp"></ColorPicker>
    
    <button class="btn btn-dark" @onclick="Clear">üíÄ</button>
    <span>       &nbsp&nbsp&nbsp       </span>
    <button class="btn btn-outline-light" @onclick="@(()=>ChangeLineWidth(3))">S</button>
    <button class="btn btn-outline-info" @onclick="@(()=>ChangeLineWidth(5))">M</button>
    <button class="btn btn-outline-warning" @onclick="@(()=>ChangeLineWidth(9f))">L</button>
    
    @* <button class="btn btn-outline-secondary" @onclick="@(() => SendUndoToServer())">‚Ü©Ô∏è</button> *@
    <span>       &nbsp&nbsp&nbsp       </span>
    
    <button class="btn btn-outline-secondary" @onclick="@(() => OpenColorModalForBackGround())">ü™£</button>
    @* @foreach (string user in Users) *@
    @* { *@
    @*     <span class="badge badge-secondary" style="margin-left:4px;">@user</span> *@
    @* } *@
</div>




@code {
    
    #region drawing
    protected float currentLineWidth = 4.3f;
    protected List<Line> Lines = new List<Line>();
    
    protected List<string> Users = new List<string>();
    
    protected bool flag = false;
    
    protected bool brushColorPickerOpened = false;

    protected bool backgroundColorPickerOpened = false;
    
    protected string currentBackgroundColor = "#22262f";
    protected string currentBackgroundColorTemp = "#22262f";
    
    private async Task ChangeBackgroundColorAndSendMessageServer(string value)
    {
        await hubConnection?.SendAsync("ChangeBackgroundColor", value);
        backgroundColorPickerOpened = false;
    }
    
    protected double prevX = 0;
    protected double currX = 0;
    protected double prevY = 0;
    protected double currY = 0;
    
    protected int count = 0;
    
    protected int status = 0;
    
    protected string currentBrushColor = "#000000";

    // private async Task OnMouseUP(MouseEventArgs e)
    // {
    //     Console.WriteLine("On Mouse Up!");
    // }
    private async Task MoveMouse(MouseEventArgs e)
    {
        await Move(e.ClientX, e.ClientY);
    }
    private async Task MoveTouch(TouchEventArgs e)
    {
        await Move(e.Touches[0].ClientX, e.Touches[0].ClientY);
    }
    private async Task Move(double clientX, double clientY)
    {
        if (IsConnected == false) return;

        if (flag)
        {
            prevX = currX;
            prevY = currY;
            currX = clientX;
            currY = clientY;
    
            var addedLine = new Line(prevX, prevY, currX, currY, currentBrushColor, currentLineWidth);
            Lines.Add(addedLine);
    
            await hubConnection?.SendAsync("Draw", prevX, prevY, currX, currY, currentBrushColor, currentLineWidth);
    
            status++;
            count++;
            this.StateHasChanged();
        }
    }
    
    private async Task DownMouse(MouseEventArgs e)
    {
        Console.WriteLine("Down Mouse!");
        await Down(e.ClientX, e.ClientY);
    }
    private async Task DownTouch(TouchEventArgs e)
    {
        await Down(e.Touches[0].ClientX, e.Touches[0].ClientY);
    }
    
    private async Task Down(double clientX, double clientY)
    {
        prevX = currX;
        prevY = currY;
        currX = clientX;
        currY = clientY;
    
        flag = true;
    }

    private void SendUndoToServer()
    {
        hubConnection?.SendAsync("Undo");
    }
    
    private void Undo()
    {
        if (Lines.Any())
        {
            Lines.RemoveAt(Lines.Count - 1);
        }
        
    }
    private void UpMouse(MouseEventArgs e)
    {
        flag = false;
    }
    private void UpTouch(TouchEventArgs e)
    {
        flag = false;
    }
    
    void OpenColorModal()
    {
        brushColorPickerOpened = true;
    }
    
    void OpenColorModalForBackGround()
    {
        backgroundColorPickerOpened = true;
    }
    
    private void ChangeLineWidth(float value)
    {
        currentLineWidth = value;
    }
    private void ChangeBrushColor(string value)
    {
        currentBrushColor = value;
        brushColorPickerOpened = false;
        Console.WriteLine("ChangeBrushColor : " + currentBrushColor);
    }
    #endregion
    
    #region signalr

    public string HubAddress = "https://drawingappserver.azurewebsites.net/DrawHub";
    // public string HubAddress = "http://localhost:5270/DrawHub";
    
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{HubAddress}")
            .WithAutomaticReconnect()
            .Build();
        
        hubConnection.Closed += async (err) => Console.WriteLine(err);

        hubConnection.On<string>("ChangeBackgroundColor", 
            async (newColor) =>
            {
                currentBackgroundColor = newColor;
                Console.WriteLine(newColor);
                await InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On("Undo", 
            async () =>
            {
                Undo();
            });
        
        hubConnection.On<double, double, double, double, string, float>("ReceiveDraw", async (SprevX, SprevY, ScurrX, ScurrY, Scolor, SlineWidth) =>
        {
            Console.WriteLine("Client : SprevX : " + SprevX + " SprevY : " + SprevY + " ScurrX : " + ScurrX + " ScurrY : " + ScurrY + " Scolor : " + Scolor + " SlineWidth : " + SlineWidth);
            var addedLine = new Line(SprevX, SprevY, ScurrX, ScurrY, Scolor, SlineWidth);
            Lines.Add(addedLine);
        
            status++;
            count++;
            await InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On("ReceiveClear", async () =>
        {
            Lines.Clear();
            count = 0;
            status = 0;
            await InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<List<string>>("ReceiveUsers", async (users) =>
        {
            Users = users;
            StateHasChanged();
        });
        
        await hubConnection.StartAsync();
        
        // SETUP
        count = await hubConnection.InvokeAsync<int>("CountLines");
        Console.WriteLine(count);
        Users = await hubConnection.InvokeAsync<List<string>>("StartUsers", Guid.NewGuid().ToString().Substring(0, 4));
        Console.WriteLine(Users);
        var downloadBackgroundColorFromServer = 
            await hubConnection.InvokeAsync<string>("GetBackgroundColor");
        currentBackgroundColor = downloadBackgroundColorFromServer;
        
        StateHasChanged();
        var cancellationTokenSource = new CancellationTokenSource();
        var stream = hubConnection.StreamAsync<Line>(
            "StartLines", cancellationTokenSource.Token);
        await foreach (Line line in stream)
        {
            Lines.Add(line);
            status++;
            await Task.Yield();
        }
        
        Console.WriteLine("Initiliazed");
        StateHasChanged();
    } 
    
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            hubConnection.DisposeAsync();
        }
    }
    
    protected async Task Clear()
    {
        Console.WriteLine("Clear");
        if(IsConnected == true)

        await hubConnection?.SendAsync("Clear");
    }
    
    private void Test()
    {
        Console.WriteLine("Test");
    }
    //
    //
    #endregion

}